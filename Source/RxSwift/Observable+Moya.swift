import Foundation
import RxSwift

/// Extension for processing raw NSData generated by network access.
extension ObservableType where E: MoyaResponse {
    
    /// Filters out responses that don't fall within the given range, generating errors when others are encountered.
    public func filterStatusCodes(range: ClosedInterval<Int>) -> Observable<E> {
        return flatMap { response -> Observable<E> in
            guard range.contains(response.statusCode) else {
                throw NSError(domain: MoyaErrorDomain, code: MoyaErrorCode.StatusCode.rawValue, userInfo: ["data": response])
            }
            return just(response)
        }
    }
    
    public func filterStatusCode(code: Int) -> Observable<E> {
        return filterStatusCodes(code...code)
    }
    
    public func filterSuccessfulStatusCodes() -> Observable<E> {
        return filterStatusCodes(200...299)
    }
    
    public func filterSuccessfulStatusAndRedirectCodes() -> Observable<E> {
        return filterStatusCodes(200...399)
    }
    
    /// Maps data received from the signal into a UIImage. If the conversion fails, the signal errors.
    public func mapImage() -> Observable<Image!> {
        return flatMap { response -> Observable<Image!> in
            guard let data = response.object as? NSData else {
                throw NSError(domain: MoyaErrorDomain, code: MoyaErrorCode.ImageMapping.rawValue, userInfo: ["data": response])
            }
            guard let image = Image(data: data) else {
                throw NSError(domain: MoyaErrorDomain, code: MoyaErrorCode.ImageMapping.rawValue, userInfo: ["data": response])
            }
            return just(image)
        }
    }
    
    /// Maps data received from the signal into a JSON object. If the conversion fails, the signal errors.
    public func mapJSON() -> Observable<AnyObject> {
        return flatMap { response -> Observable<AnyObject> in
            do {
                
                guard let data = response.object as? NSData else {
                    throw NSError(domain: MoyaErrorDomain, code: MoyaErrorCode.JSONMapping.rawValue, userInfo: ["data": response])
                }
                
                return just(try NSJSONSerialization.JSONObjectWithData(data, options: .AllowFragments))
            } catch {
                throw error
            }
        }
    }
    
    /// Maps data received from the signal into a String. If the conversion fails, the signal errors.
    public func mapString() -> Observable<String> {
        return flatMap { response -> Observable<String> in
            guard let data = response.object as? NSData else {
                throw NSError(domain: MoyaErrorDomain, code: MoyaErrorCode.StringMapping.rawValue, userInfo: ["data": response])
            }
            
            guard let string = NSString(data: data, encoding: NSUTF8StringEncoding) else {
                throw NSError(domain: MoyaErrorDomain, code: MoyaErrorCode.StringMapping.rawValue, userInfo: ["data": response])
            }
            return just(string as String)
        }
    }
}
